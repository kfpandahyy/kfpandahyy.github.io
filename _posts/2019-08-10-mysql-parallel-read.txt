---
Date: August 10, 2019
title: MySQL Parallel Read
layout: post
comments: true
language: chinese
category: [mysql]
keywords: mysql
description: 
---
介绍Parallel Read
<!-- more -->


## count(*)流程

```
ha_innopart::records()
	|-dict_index_t *index = m_prebuilt->table->first_index();
	|-ut_ad(index->is_clustered());
	|-size_t n_threads = thd_parallel_read_threads(m_prebuilt->trx->mysql_thd);
	|-ret = row_scan_index_for_mysql(m_prebuilt, index, n_threads, false, &n_rows);
	


dberr_t row_scan_index_for_mysql(row_prebuilt_t *prebuilt, dict_index_t *index,
                                 size_t n_threads, bool check_keys,
                                 ulint *n_rows)
	|-if (prebuilt->trx->isolation_level > TRX_ISO_READ_UNCOMMITTED &&
      prebuilt->select_lock_type == LOCK_NONE && index->is_clustered() &&
      (check_keys || prebuilt->trx->mysql_n_tables_locked == 0) &&
      !prebuilt->ins_sel_stmt)
		|-n_threads = Parallel_reader::available_threads(n_threads); //获得可执行并发度（MySQL整体总的并发线程限制为256）
		|-if (n_threads > 0)
			|-trx_start_if_not_started_xa(prebuilt->trx, false);
			|-auto trx = prebuilt->trx;
			|-std::vector<dict_index_t*> indexes;
			|-indexes.push_back(index);
			|-if (!check_keys)//如果是count(*)则走row_mysql_parallel_select_count_star
				|-return (row_mysql_parallel_select_count_star(trx, indexes, n_threads,
															   n_rows));
			|-return (parallel_check_table(trx, index, n_threads, n_rows));
	|-skip_parallel_read:
	|-...




//获得真正并行度
/*整个MySQL最大可并行线程为MAX_THREADS 256
  1. 当可用线程数够时，需要多少用多少
  2. 当可用线程数量不够时，剩余多少用多少
  3. 当没有可用线程数，则返回0
*/

size_t Parallel_reader::available_threads(size_t n_required)
	|-const auto RELAXED = std::memory_order_relaxed;
	|-auto active = s_active_threads.fetch_add(n_required, RELAXED);
	|-if (active < MAX_THREADS)
		|-const auto available = MAX_THREADS - active;
		|-if (n_required <= available)
			|-return (n_required);
		|-else
			|-s_active_threads.fetch_sub(n_required - available, RELAXED);
			|-return (available);
	|-s_active_threads.fetch_sub(n_required, RELAXED);
	|-return (0);


//Read the total number of records in a consistent view.
dberr_t row_mysql_parallel_select_count_star(
    trx_t *trx, std::vector<dict_index_t *> &indexes, size_t max_threads,
    ulint *n_rows)
	|-Check_interrupt checker[Parallel_reader::MAX_THREADS] = {};
	|-Parallel_reader reader(max_threads);
	|-const Parallel_reader::Scan_range FULL_SCAN;
	|-for (auto index : indexes)
		|-Parallel_reader::Config config(FULL_SCAN, index);
		|-success =reader.add_scan(trx,lamnda函数1) //
	|-Counter::for_each(n_recs,lamnda函数2)//*n_rows += n; 将vertor n_recs中的数，累加计算出总数*n_rows



lamnda函数1
[&](const Parallel_reader::Ctx *ctx)
	|-Counter::inc(n_recs, ctx->m_thread_id); //vertor n_recs对应线程的数加1
	|-auto &check = checker[ctx->m_thread_id];
	|-if (ctx->m_block != check.m_prev_block) //每扫64个页，判断下是否事务以及终止
		|-check.m_prev_block = ctx->m_block;
		|-++check.m_count;
		|-if (!(check.m_count % 64) && trx_is_interrupted(trx))
			|-return (DB_INTERRUPTED);
	|-return (DB_SUCCESS);
	

lamnda函数2
[=](const Counter::Type n)
	|-if (n > 0)
		|-*n_rows += n;
	
	

	
//ut0counter.h
/** Counter shard. */
struct Shard {
  /** Separate on cache line. */
  Pad m_pad;

  /** Sharded counter. */
  N m_n{};
};


using Shards = std::array<Shard, 128>;
using Function = std::function<void(const Type)>;

/** Increment the counter of a shard by 1.
@param[in,out]  shards          Sharded counter to increment.
@param[in] id                   Shard key. */
inline void inc(Shards &shards, size_t id) {
  shards[id % shards.size()].m_n.fetch_add(1, std::memory_order_relaxed);
}

/** Increment the counter for a shard by n.
@param[in,out]  shards          Sharded counter to increment.
@param[in] id                   Shard key.
@param[in] n                    Number to add. */
inline void add(Shards &shards, size_t id, size_t n) {
  shards[id % shards.size()].m_n.fetch_add(n, std::memory_order_relaxed);
}

/** Get the counter value for a shard.
@param[in,out]  shards          Sharded counter to increment.
@param[in] id                   Shard key. */
inline Type get(const Shards &shards, size_t id) {
  return (shards[id % shards.size()].m_n.load(std::memory_order_relaxed));
}

/** Iterate over the shards.
@param[in] shards               Shards to iterate over
@param[in] f                    Callback function
@return total value. */
inline void for_each(const Shards &shards, Function &&f) {
  for (const auto &shard : shards) {
    f(shard.m_n);
  }
}

/** Get the total value of all shards.
@param[in] shards               Shards to sum.
@return total value. */
inline Type total(const Shards &shards) {
  Type n = 0;

  for_each(shards, [&](const Type count) { n += count; });

  return (n);
}

/** Clear the counter - reset to 0.
@param[in,out] shards          Shards to clear. */
inline void clear(Shards &shards) {
  for (auto &shard : shards) {
    shard.m_n.store(0, std::memory_order_relaxed);
  }
}

	


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	




